/**
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 * <p>
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import org.junit.Test;

/**
 * API tests for AccessApi
 */
public class AccessApiTest extends TestFixture {

    private final AccessApi api = new AccessApi();


    /**
     * Creates a token for accessing the REST API via username/password
     * <p>
     * The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. It is stored in the browser as a cookie, but also returned inthe response body to be stored/used by third party client scripts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessTokenTest() throws ApiException {
        ApiClient client = apiClient();
        api.setApiClient(client);

        String username = "admin";
        String password = "adminadminadmin";
        String response = api.createAccessToken(username, password);

        System.out.println(response);
    }

    /**
     * Creates a token for accessing the REST API via Kerberos ticket exchange / SPNEGO negotiation
     * <p>
     * The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format &#39;Authorization: Bearer &lt;token&gt;&#39;. It is also stored in the browser as a cookie.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessTokenFromTicketTest() throws ApiException {
//         String response = api.createAccessTokenFromTicket();

//        System.out.println(response);
    }

    /**
     * Gets the status the client&#39;s access
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessStatusTest() throws ApiException {
        // AccessStatusEntity response = api.getAccessStatus();

        // TODO: test validations
    }

    /**
     * Get expiration for current Access Token
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessTokenExpirationTest() throws ApiException {
        // AccessTokenExpirationEntity response = api.getAccessTokenExpiration();

        // TODO: test validations
    }

    /**
     * Retrieves the access configuration for this NiFi
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoginConfigTest() throws ApiException {
        // AccessConfigurationEntity response = api.getLoginConfig();

        // TODO: test validations
    }

    /**
     * Redirect/callback URI for processing the result of the Apache Knox login sequence.
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knoxCallbackTest() throws ApiException {
        // api.knoxCallback();

        // TODO: test validations
    }

    /**
     * Performs a logout in the Apache Knox.
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knoxLogoutTest() throws ApiException {
        // api.knoxLogout();

        // TODO: test validations
    }

    /**
     * Initiates a request to authenticate through Apache Knox.
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knoxRequestTest() throws ApiException {
        // api.knoxRequest();

        // TODO: test validations
    }

    /**
     * Performs a logout for other providers that have been issued a JWT.
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logOutTest() throws ApiException {
        // api.logOut();

        // TODO: test validations
    }

    /**
     * Completes the logout sequence by removing the cached Logout Request and Cookie if they existed and redirects to /nifi/login.
     * <p>
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logOutCompleteTest() throws ApiException {
        // api.logOutComplete();

        // TODO: test validations
    }

}
