/**
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.GarbageCollectionDiagnosticsDTO;
import io.swagger.client.model.RepositoryUsageDTO;
import java.util.ArrayList;
import java.util.List;


/**
 * JVMSystemDiagnosticsSnapshotDTO
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-11T13:57:19.352+09:00")
public class JVMSystemDiagnosticsSnapshotDTO   {
  @SerializedName("flowFileRepositoryStorageUsage")
  private RepositoryUsageDTO flowFileRepositoryStorageUsage = null;

  @SerializedName("contentRepositoryStorageUsage")
  private List<RepositoryUsageDTO> contentRepositoryStorageUsage = new ArrayList<RepositoryUsageDTO>();

  @SerializedName("provenanceRepositoryStorageUsage")
  private List<RepositoryUsageDTO> provenanceRepositoryStorageUsage = new ArrayList<RepositoryUsageDTO>();

  @SerializedName("maxHeapBytes")
  private Long maxHeapBytes = null;

  @SerializedName("maxHeap")
  private String maxHeap = null;

  @SerializedName("garbageCollectionDiagnostics")
  private List<GarbageCollectionDiagnosticsDTO> garbageCollectionDiagnostics = new ArrayList<GarbageCollectionDiagnosticsDTO>();

  @SerializedName("cpuCores")
  private Integer cpuCores = null;

  @SerializedName("cpuLoadAverage")
  private Double cpuLoadAverage = null;

  @SerializedName("physicalMemoryBytes")
  private Long physicalMemoryBytes = null;

  @SerializedName("physicalMemory")
  private String physicalMemory = null;

  @SerializedName("openFileDescriptors")
  private Long openFileDescriptors = null;

  @SerializedName("maxOpenFileDescriptors")
  private Long maxOpenFileDescriptors = null;

  public JVMSystemDiagnosticsSnapshotDTO flowFileRepositoryStorageUsage(RepositoryUsageDTO flowFileRepositoryStorageUsage) {
    this.flowFileRepositoryStorageUsage = flowFileRepositoryStorageUsage;
    return this;
  }

   /**
   * Information about the FlowFile Repository's usage
   * @return flowFileRepositoryStorageUsage
  **/
  @ApiModelProperty(example = "null", value = "Information about the FlowFile Repository's usage")
  public RepositoryUsageDTO getFlowFileRepositoryStorageUsage() {
    return flowFileRepositoryStorageUsage;
  }

  public void setFlowFileRepositoryStorageUsage(RepositoryUsageDTO flowFileRepositoryStorageUsage) {
    this.flowFileRepositoryStorageUsage = flowFileRepositoryStorageUsage;
  }

  public JVMSystemDiagnosticsSnapshotDTO contentRepositoryStorageUsage(List<RepositoryUsageDTO> contentRepositoryStorageUsage) {
    this.contentRepositoryStorageUsage = contentRepositoryStorageUsage;
    return this;
  }

  public JVMSystemDiagnosticsSnapshotDTO addContentRepositoryStorageUsageItem(RepositoryUsageDTO contentRepositoryStorageUsageItem) {
    this.contentRepositoryStorageUsage.add(contentRepositoryStorageUsageItem);
    return this;
  }

   /**
   * Information about the Content Repository's usage
   * @return contentRepositoryStorageUsage
  **/
  @ApiModelProperty(example = "null", value = "Information about the Content Repository's usage")
  public List<RepositoryUsageDTO> getContentRepositoryStorageUsage() {
    return contentRepositoryStorageUsage;
  }

  public void setContentRepositoryStorageUsage(List<RepositoryUsageDTO> contentRepositoryStorageUsage) {
    this.contentRepositoryStorageUsage = contentRepositoryStorageUsage;
  }

  public JVMSystemDiagnosticsSnapshotDTO provenanceRepositoryStorageUsage(List<RepositoryUsageDTO> provenanceRepositoryStorageUsage) {
    this.provenanceRepositoryStorageUsage = provenanceRepositoryStorageUsage;
    return this;
  }

  public JVMSystemDiagnosticsSnapshotDTO addProvenanceRepositoryStorageUsageItem(RepositoryUsageDTO provenanceRepositoryStorageUsageItem) {
    this.provenanceRepositoryStorageUsage.add(provenanceRepositoryStorageUsageItem);
    return this;
  }

   /**
   * Information about the Provenance Repository's usage
   * @return provenanceRepositoryStorageUsage
  **/
  @ApiModelProperty(example = "null", value = "Information about the Provenance Repository's usage")
  public List<RepositoryUsageDTO> getProvenanceRepositoryStorageUsage() {
    return provenanceRepositoryStorageUsage;
  }

  public void setProvenanceRepositoryStorageUsage(List<RepositoryUsageDTO> provenanceRepositoryStorageUsage) {
    this.provenanceRepositoryStorageUsage = provenanceRepositoryStorageUsage;
  }

  public JVMSystemDiagnosticsSnapshotDTO maxHeapBytes(Long maxHeapBytes) {
    this.maxHeapBytes = maxHeapBytes;
    return this;
  }

   /**
   * The maximum number of bytes that the JVM heap is configured to use for heap
   * @return maxHeapBytes
  **/
  @ApiModelProperty(example = "null", value = "The maximum number of bytes that the JVM heap is configured to use for heap")
  public Long getMaxHeapBytes() {
    return maxHeapBytes;
  }

  public void setMaxHeapBytes(Long maxHeapBytes) {
    this.maxHeapBytes = maxHeapBytes;
  }

  public JVMSystemDiagnosticsSnapshotDTO maxHeap(String maxHeap) {
    this.maxHeap = maxHeap;
    return this;
  }

   /**
   * The maximum number of bytes that the JVM heap is configured to use, as a human-readable value
   * @return maxHeap
  **/
  @ApiModelProperty(example = "null", value = "The maximum number of bytes that the JVM heap is configured to use, as a human-readable value")
  public String getMaxHeap() {
    return maxHeap;
  }

  public void setMaxHeap(String maxHeap) {
    this.maxHeap = maxHeap;
  }

  public JVMSystemDiagnosticsSnapshotDTO garbageCollectionDiagnostics(List<GarbageCollectionDiagnosticsDTO> garbageCollectionDiagnostics) {
    this.garbageCollectionDiagnostics = garbageCollectionDiagnostics;
    return this;
  }

  public JVMSystemDiagnosticsSnapshotDTO addGarbageCollectionDiagnosticsItem(GarbageCollectionDiagnosticsDTO garbageCollectionDiagnosticsItem) {
    this.garbageCollectionDiagnostics.add(garbageCollectionDiagnosticsItem);
    return this;
  }

   /**
   * Diagnostic information about the JVM's garbage collections
   * @return garbageCollectionDiagnostics
  **/
  @ApiModelProperty(example = "null", value = "Diagnostic information about the JVM's garbage collections")
  public List<GarbageCollectionDiagnosticsDTO> getGarbageCollectionDiagnostics() {
    return garbageCollectionDiagnostics;
  }

  public void setGarbageCollectionDiagnostics(List<GarbageCollectionDiagnosticsDTO> garbageCollectionDiagnostics) {
    this.garbageCollectionDiagnostics = garbageCollectionDiagnostics;
  }

  public JVMSystemDiagnosticsSnapshotDTO cpuCores(Integer cpuCores) {
    this.cpuCores = cpuCores;
    return this;
  }

   /**
   * The number of CPU Cores available on the system
   * @return cpuCores
  **/
  @ApiModelProperty(example = "null", value = "The number of CPU Cores available on the system")
  public Integer getCpuCores() {
    return cpuCores;
  }

  public void setCpuCores(Integer cpuCores) {
    this.cpuCores = cpuCores;
  }

  public JVMSystemDiagnosticsSnapshotDTO cpuLoadAverage(Double cpuLoadAverage) {
    this.cpuLoadAverage = cpuLoadAverage;
    return this;
  }

   /**
   * The 1-minute CPU Load Average
   * @return cpuLoadAverage
  **/
  @ApiModelProperty(example = "null", value = "The 1-minute CPU Load Average")
  public Double getCpuLoadAverage() {
    return cpuLoadAverage;
  }

  public void setCpuLoadAverage(Double cpuLoadAverage) {
    this.cpuLoadAverage = cpuLoadAverage;
  }

  public JVMSystemDiagnosticsSnapshotDTO physicalMemoryBytes(Long physicalMemoryBytes) {
    this.physicalMemoryBytes = physicalMemoryBytes;
    return this;
  }

   /**
   * The number of bytes of RAM available on the system
   * @return physicalMemoryBytes
  **/
  @ApiModelProperty(example = "null", value = "The number of bytes of RAM available on the system")
  public Long getPhysicalMemoryBytes() {
    return physicalMemoryBytes;
  }

  public void setPhysicalMemoryBytes(Long physicalMemoryBytes) {
    this.physicalMemoryBytes = physicalMemoryBytes;
  }

  public JVMSystemDiagnosticsSnapshotDTO physicalMemory(String physicalMemory) {
    this.physicalMemory = physicalMemory;
    return this;
  }

   /**
   * The number of bytes of RAM available on the system as a human-readable value
   * @return physicalMemory
  **/
  @ApiModelProperty(example = "null", value = "The number of bytes of RAM available on the system as a human-readable value")
  public String getPhysicalMemory() {
    return physicalMemory;
  }

  public void setPhysicalMemory(String physicalMemory) {
    this.physicalMemory = physicalMemory;
  }

  public JVMSystemDiagnosticsSnapshotDTO openFileDescriptors(Long openFileDescriptors) {
    this.openFileDescriptors = openFileDescriptors;
    return this;
  }

   /**
   * The number of files that are open by the NiFi process
   * @return openFileDescriptors
  **/
  @ApiModelProperty(example = "null", value = "The number of files that are open by the NiFi process")
  public Long getOpenFileDescriptors() {
    return openFileDescriptors;
  }

  public void setOpenFileDescriptors(Long openFileDescriptors) {
    this.openFileDescriptors = openFileDescriptors;
  }

  public JVMSystemDiagnosticsSnapshotDTO maxOpenFileDescriptors(Long maxOpenFileDescriptors) {
    this.maxOpenFileDescriptors = maxOpenFileDescriptors;
    return this;
  }

   /**
   * The maximum number of open file descriptors that are available to each process
   * @return maxOpenFileDescriptors
  **/
  @ApiModelProperty(example = "null", value = "The maximum number of open file descriptors that are available to each process")
  public Long getMaxOpenFileDescriptors() {
    return maxOpenFileDescriptors;
  }

  public void setMaxOpenFileDescriptors(Long maxOpenFileDescriptors) {
    this.maxOpenFileDescriptors = maxOpenFileDescriptors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JVMSystemDiagnosticsSnapshotDTO jVMSystemDiagnosticsSnapshotDTO = (JVMSystemDiagnosticsSnapshotDTO) o;
    return Objects.equals(this.flowFileRepositoryStorageUsage, jVMSystemDiagnosticsSnapshotDTO.flowFileRepositoryStorageUsage) &&
        Objects.equals(this.contentRepositoryStorageUsage, jVMSystemDiagnosticsSnapshotDTO.contentRepositoryStorageUsage) &&
        Objects.equals(this.provenanceRepositoryStorageUsage, jVMSystemDiagnosticsSnapshotDTO.provenanceRepositoryStorageUsage) &&
        Objects.equals(this.maxHeapBytes, jVMSystemDiagnosticsSnapshotDTO.maxHeapBytes) &&
        Objects.equals(this.maxHeap, jVMSystemDiagnosticsSnapshotDTO.maxHeap) &&
        Objects.equals(this.garbageCollectionDiagnostics, jVMSystemDiagnosticsSnapshotDTO.garbageCollectionDiagnostics) &&
        Objects.equals(this.cpuCores, jVMSystemDiagnosticsSnapshotDTO.cpuCores) &&
        Objects.equals(this.cpuLoadAverage, jVMSystemDiagnosticsSnapshotDTO.cpuLoadAverage) &&
        Objects.equals(this.physicalMemoryBytes, jVMSystemDiagnosticsSnapshotDTO.physicalMemoryBytes) &&
        Objects.equals(this.physicalMemory, jVMSystemDiagnosticsSnapshotDTO.physicalMemory) &&
        Objects.equals(this.openFileDescriptors, jVMSystemDiagnosticsSnapshotDTO.openFileDescriptors) &&
        Objects.equals(this.maxOpenFileDescriptors, jVMSystemDiagnosticsSnapshotDTO.maxOpenFileDescriptors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowFileRepositoryStorageUsage, contentRepositoryStorageUsage, provenanceRepositoryStorageUsage, maxHeapBytes, maxHeap, garbageCollectionDiagnostics, cpuCores, cpuLoadAverage, physicalMemoryBytes, physicalMemory, openFileDescriptors, maxOpenFileDescriptors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JVMSystemDiagnosticsSnapshotDTO {\n");
    
    sb.append("    flowFileRepositoryStorageUsage: ").append(toIndentedString(flowFileRepositoryStorageUsage)).append("\n");
    sb.append("    contentRepositoryStorageUsage: ").append(toIndentedString(contentRepositoryStorageUsage)).append("\n");
    sb.append("    provenanceRepositoryStorageUsage: ").append(toIndentedString(provenanceRepositoryStorageUsage)).append("\n");
    sb.append("    maxHeapBytes: ").append(toIndentedString(maxHeapBytes)).append("\n");
    sb.append("    maxHeap: ").append(toIndentedString(maxHeap)).append("\n");
    sb.append("    garbageCollectionDiagnostics: ").append(toIndentedString(garbageCollectionDiagnostics)).append("\n");
    sb.append("    cpuCores: ").append(toIndentedString(cpuCores)).append("\n");
    sb.append("    cpuLoadAverage: ").append(toIndentedString(cpuLoadAverage)).append("\n");
    sb.append("    physicalMemoryBytes: ").append(toIndentedString(physicalMemoryBytes)).append("\n");
    sb.append("    physicalMemory: ").append(toIndentedString(physicalMemory)).append("\n");
    sb.append("    openFileDescriptors: ").append(toIndentedString(openFileDescriptors)).append("\n");
    sb.append("    maxOpenFileDescriptors: ").append(toIndentedString(maxOpenFileDescriptors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

