/**
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ParameterEntity;


/**
 * ParameterStatusDTO
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-11T13:57:19.352+09:00")
public class ParameterStatusDTO   {
  @SerializedName("parameter")
  private ParameterEntity parameter = null;

  /**
   * Indicates the status of the parameter, compared to the existing parameter context
   */
  public enum StatusEnum {
    @SerializedName("NEW")
    NEW("NEW"),
    
    @SerializedName("CHANGED")
    CHANGED("CHANGED"),
    
    @SerializedName("REMOVED")
    REMOVED("REMOVED"),
    
    @SerializedName("MISSING_BUT_REFERENCED")
    MISSING_BUT_REFERENCED("MISSING_BUT_REFERENCED"),
    
    @SerializedName("UNCHANGED")
    UNCHANGED("UNCHANGED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public ParameterStatusDTO parameter(ParameterEntity parameter) {
    this.parameter = parameter;
    return this;
  }

   /**
   * The name of the Parameter
   * @return parameter
  **/
  @ApiModelProperty(example = "null", value = "The name of the Parameter")
  public ParameterEntity getParameter() {
    return parameter;
  }

  public void setParameter(ParameterEntity parameter) {
    this.parameter = parameter;
  }

  public ParameterStatusDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of the parameter, compared to the existing parameter context
   * @return status
  **/
  @ApiModelProperty(example = "null", value = "Indicates the status of the parameter, compared to the existing parameter context")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterStatusDTO parameterStatusDTO = (ParameterStatusDTO) o;
    return Objects.equals(this.parameter, parameterStatusDTO.parameter) &&
        Objects.equals(this.status, parameterStatusDTO.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameter, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterStatusDTO {\n");
    
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

