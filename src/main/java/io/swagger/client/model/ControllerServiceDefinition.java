/**
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 * <p>
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.*;


/**
 * ControllerServiceDefinition
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-11T13:57:19.352+09:00")
public class ControllerServiceDefinition {
    @SerializedName("group")
    private String group = null;

    @SerializedName("artifact")
    private String artifact = null;

    @SerializedName("version")
    private String version = null;

    @SerializedName("type")
    private String type = null;

    @SerializedName("typeDescription")
    private String typeDescription = null;

    @SerializedName("buildInfo")
    private BuildInfo buildInfo = null;

    @SerializedName("providedApiImplementations")
    private List<DefinedType> providedApiImplementations = new ArrayList<DefinedType>();

    @SerializedName("tags")
    private List<String> tags = new ArrayList<String>();

    @SerializedName("deprecated")
    private Boolean deprecated = null;

    @SerializedName("deprecationReason")
    private String deprecationReason = null;

    @SerializedName("restricted")
    private Boolean restricted = null;

    @SerializedName("restrictedExplanation")
    private String restrictedExplanation = null;

    @SerializedName("explicitRestrictions")
    private List<Restriction> explicitRestrictions = new ArrayList<Restriction>();

    @SerializedName("stateful")
    private Stateful stateful = null;

    @SerializedName("propertyDescriptors")
    private Map<String, PropertyDescriptor> propertyDescriptors = new HashMap<String, PropertyDescriptor>();

    @SerializedName("supportsDynamicProperties")
    private Boolean supportsDynamicProperties = null;

    public ControllerServiceDefinition group(String group) {
        this.group = group;
        return this;
    }

    /**
     * The group name of the bundle that provides the referenced type.
     * @return group
     **/
    @ApiModelProperty(example = "null", value = "The group name of the bundle that provides the referenced type.")
    public String getGroup() {
        return group;
    }

    public void setGroup(String group) {
        this.group = group;
    }

    public ControllerServiceDefinition artifact(String artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * The artifact name of the bundle that provides the referenced type.
     * @return artifact
     **/
    @ApiModelProperty(example = "null", value = "The artifact name of the bundle that provides the referenced type.")
    public String getArtifact() {
        return artifact;
    }

    public void setArtifact(String artifact) {
        this.artifact = artifact;
    }

    public ControllerServiceDefinition version(String version) {
        this.version = version;
        return this;
    }

    /**
     * The version of the bundle that provides the referenced type.
     * @return version
     **/
    @ApiModelProperty(example = "null", value = "The version of the bundle that provides the referenced type.")
    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public ControllerServiceDefinition type(String type) {
        this.type = type;
        return this;
    }

    /**
     * The fully-qualified class type
     * @return type
     **/
    @ApiModelProperty(example = "null", required = true, value = "The fully-qualified class type")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public ControllerServiceDefinition typeDescription(String typeDescription) {
        this.typeDescription = typeDescription;
        return this;
    }

    /**
     * The description of the type.
     * @return typeDescription
     **/
    @ApiModelProperty(example = "null", value = "The description of the type.")
    public String getTypeDescription() {
        return typeDescription;
    }

    public void setTypeDescription(String typeDescription) {
        this.typeDescription = typeDescription;
    }

    public ControllerServiceDefinition buildInfo(BuildInfo buildInfo) {
        this.buildInfo = buildInfo;
        return this;
    }

    /**
     * The build metadata for this component
     * @return buildInfo
     **/
    @ApiModelProperty(example = "null", value = "The build metadata for this component")
    public BuildInfo getBuildInfo() {
        return buildInfo;
    }

    public void setBuildInfo(BuildInfo buildInfo) {
        this.buildInfo = buildInfo;
    }

    public ControllerServiceDefinition providedApiImplementations(List<DefinedType> providedApiImplementations) {
        this.providedApiImplementations = providedApiImplementations;
        return this;
    }

    public ControllerServiceDefinition addProvidedApiImplementationsItem(DefinedType providedApiImplementationsItem) {
        this.providedApiImplementations.add(providedApiImplementationsItem);
        return this;
    }

    /**
     * If this type represents a provider for an interface, this lists the APIs it implements
     * @return providedApiImplementations
     **/
    @ApiModelProperty(example = "null", value = "If this type represents a provider for an interface, this lists the APIs it implements")
    public List<DefinedType> getProvidedApiImplementations() {
        return providedApiImplementations;
    }

    public void setProvidedApiImplementations(List<DefinedType> providedApiImplementations) {
        this.providedApiImplementations = providedApiImplementations;
    }

    public ControllerServiceDefinition tags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    public ControllerServiceDefinition addTagsItem(String tagsItem) {
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The tags associated with this type
     * @return tags
     **/
    @ApiModelProperty(example = "null", value = "The tags associated with this type")
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public ControllerServiceDefinition deprecated(Boolean deprecated) {
        this.deprecated = deprecated;
        return this;
    }

    /**
     * Whether or not the component has been deprecated
     * @return deprecated
     **/
    @ApiModelProperty(example = "null", value = "Whether or not the component has been deprecated")
    public Boolean getDeprecated() {
        return deprecated;
    }

    public void setDeprecated(Boolean deprecated) {
        this.deprecated = deprecated;
    }

    public ControllerServiceDefinition deprecationReason(String deprecationReason) {
        this.deprecationReason = deprecationReason;
        return this;
    }

    /**
     * If this component has been deprecated, this optional field can be used to provide an explanation
     * @return deprecationReason
     **/
    @ApiModelProperty(example = "null", value = "If this component has been deprecated, this optional field can be used to provide an explanation")
    public String getDeprecationReason() {
        return deprecationReason;
    }

    public void setDeprecationReason(String deprecationReason) {
        this.deprecationReason = deprecationReason;
    }

    public ControllerServiceDefinition restricted(Boolean restricted) {
        this.restricted = restricted;
        return this;
    }

    /**
     * Whether or not the component has a general restriction
     * @return restricted
     **/
    @ApiModelProperty(example = "null", value = "Whether or not the component has a general restriction")
    public Boolean getRestricted() {
        return restricted;
    }

    public void setRestricted(Boolean restricted) {
        this.restricted = restricted;
    }

    public ControllerServiceDefinition restrictedExplanation(String restrictedExplanation) {
        this.restrictedExplanation = restrictedExplanation;
        return this;
    }

    /**
     * An optional description of the general restriction
     * @return restrictedExplanation
     **/
    @ApiModelProperty(example = "null", value = "An optional description of the general restriction")
    public String getRestrictedExplanation() {
        return restrictedExplanation;
    }

    public void setRestrictedExplanation(String restrictedExplanation) {
        this.restrictedExplanation = restrictedExplanation;
    }

    public ControllerServiceDefinition explicitRestrictions(List<Restriction> explicitRestrictions) {
        this.explicitRestrictions = explicitRestrictions;
        return this;
    }

    public ControllerServiceDefinition addExplicitRestrictionsItem(Restriction explicitRestrictionsItem) {
        this.explicitRestrictions.add(explicitRestrictionsItem);
        return this;
    }

    /**
     * Explicit restrictions that indicate a require permission to use the component
     * @return explicitRestrictions
     **/
    @ApiModelProperty(example = "null", value = "Explicit restrictions that indicate a require permission to use the component")
    public List<Restriction> getExplicitRestrictions() {
        return explicitRestrictions;
    }

    public void setExplicitRestrictions(List<Restriction> explicitRestrictions) {
        this.explicitRestrictions = explicitRestrictions;
    }

    public ControllerServiceDefinition stateful(Stateful stateful) {
        this.stateful = stateful;
        return this;
    }

    /**
     * Get stateful
     * @return stateful
     **/
    @ApiModelProperty(example = "null", value = "")
    public Stateful getStateful() {
        return stateful;
    }

    public void setStateful(Stateful stateful) {
        this.stateful = stateful;
    }

    public ControllerServiceDefinition propertyDescriptors(Map<String, PropertyDescriptor> propertyDescriptors) {
        this.propertyDescriptors = propertyDescriptors;
        return this;
    }

    public ControllerServiceDefinition putPropertyDescriptorsItem(String key, PropertyDescriptor propertyDescriptorsItem) {
        this.propertyDescriptors.put(key, propertyDescriptorsItem);
        return this;
    }

    /**
     * Descriptions of configuration properties applicable to this component.
     * @return propertyDescriptors
     **/
    @ApiModelProperty(example = "null", value = "Descriptions of configuration properties applicable to this component.")
    public Map<String, PropertyDescriptor> getPropertyDescriptors() {
        return propertyDescriptors;
    }

    public void setPropertyDescriptors(Map<String, PropertyDescriptor> propertyDescriptors) {
        this.propertyDescriptors = propertyDescriptors;
    }

    public ControllerServiceDefinition supportsDynamicProperties(Boolean supportsDynamicProperties) {
        this.supportsDynamicProperties = supportsDynamicProperties;
        return this;
    }

    /**
     * Whether or not this component makes use of dynamic (user-set) properties.
     * @return supportsDynamicProperties
     **/
    @ApiModelProperty(example = "null", value = "Whether or not this component makes use of dynamic (user-set) properties.")
    public Boolean getSupportsDynamicProperties() {
        return supportsDynamicProperties;
    }

    public void setSupportsDynamicProperties(Boolean supportsDynamicProperties) {
        this.supportsDynamicProperties = supportsDynamicProperties;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ControllerServiceDefinition controllerServiceDefinition = (ControllerServiceDefinition) o;
        return Objects.equals(this.group, controllerServiceDefinition.group) &&
                Objects.equals(this.artifact, controllerServiceDefinition.artifact) &&
                Objects.equals(this.version, controllerServiceDefinition.version) &&
                Objects.equals(this.type, controllerServiceDefinition.type) &&
                Objects.equals(this.typeDescription, controllerServiceDefinition.typeDescription) &&
                Objects.equals(this.buildInfo, controllerServiceDefinition.buildInfo) &&
                Objects.equals(this.providedApiImplementations, controllerServiceDefinition.providedApiImplementations) &&
                Objects.equals(this.tags, controllerServiceDefinition.tags) &&
                Objects.equals(this.deprecated, controllerServiceDefinition.deprecated) &&
                Objects.equals(this.deprecationReason, controllerServiceDefinition.deprecationReason) &&
                Objects.equals(this.restricted, controllerServiceDefinition.restricted) &&
                Objects.equals(this.restrictedExplanation, controllerServiceDefinition.restrictedExplanation) &&
                Objects.equals(this.explicitRestrictions, controllerServiceDefinition.explicitRestrictions) &&
                Objects.equals(this.stateful, controllerServiceDefinition.stateful) &&
                Objects.equals(this.propertyDescriptors, controllerServiceDefinition.propertyDescriptors) &&
                Objects.equals(this.supportsDynamicProperties, controllerServiceDefinition.supportsDynamicProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(group, artifact, version, type, typeDescription, buildInfo, providedApiImplementations, tags, deprecated, deprecationReason, restricted, restrictedExplanation, explicitRestrictions, stateful, propertyDescriptors, supportsDynamicProperties);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ControllerServiceDefinition {\n");

        sb.append("    group: ").append(toIndentedString(group)).append("\n");
        sb.append("    artifact: ").append(toIndentedString(artifact)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
        sb.append("    buildInfo: ").append(toIndentedString(buildInfo)).append("\n");
        sb.append("    providedApiImplementations: ").append(toIndentedString(providedApiImplementations)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
        sb.append("    deprecationReason: ").append(toIndentedString(deprecationReason)).append("\n");
        sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
        sb.append("    restrictedExplanation: ").append(toIndentedString(restrictedExplanation)).append("\n");
        sb.append("    explicitRestrictions: ").append(toIndentedString(explicitRestrictions)).append("\n");
        sb.append("    stateful: ").append(toIndentedString(stateful)).append("\n");
        sb.append("    propertyDescriptors: ").append(toIndentedString(propertyDescriptors)).append("\n");
        sb.append("    supportsDynamicProperties: ").append(toIndentedString(supportsDynamicProperties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

