/**
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 * <p>
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * ThreadDumpDTO
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-11T13:57:19.352+09:00")
public class ThreadDumpDTO {
    @SerializedName("nodeId")
    private String nodeId = null;

    @SerializedName("nodeAddress")
    private String nodeAddress = null;

    @SerializedName("apiPort")
    private Integer apiPort = null;

    @SerializedName("stackTrace")
    private String stackTrace = null;

    @SerializedName("threadName")
    private String threadName = null;

    @SerializedName("threadActiveMillis")
    private Long threadActiveMillis = null;

    @SerializedName("taskTerminated")
    private Boolean taskTerminated = null;

    public ThreadDumpDTO nodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }

    /**
     * The ID of the node in the cluster
     * @return nodeId
     **/
    @ApiModelProperty(example = "null", value = "The ID of the node in the cluster")
    public String getNodeId() {
        return nodeId;
    }

    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    public ThreadDumpDTO nodeAddress(String nodeAddress) {
        this.nodeAddress = nodeAddress;
        return this;
    }

    /**
     * The address of the node in the cluster
     * @return nodeAddress
     **/
    @ApiModelProperty(example = "null", value = "The address of the node in the cluster")
    public String getNodeAddress() {
        return nodeAddress;
    }

    public void setNodeAddress(String nodeAddress) {
        this.nodeAddress = nodeAddress;
    }

    public ThreadDumpDTO apiPort(Integer apiPort) {
        this.apiPort = apiPort;
        return this;
    }

    /**
     * The port the node is listening for API requests.
     * @return apiPort
     **/
    @ApiModelProperty(example = "null", value = "The port the node is listening for API requests.")
    public Integer getApiPort() {
        return apiPort;
    }

    public void setApiPort(Integer apiPort) {
        this.apiPort = apiPort;
    }

    public ThreadDumpDTO stackTrace(String stackTrace) {
        this.stackTrace = stackTrace;
        return this;
    }

    /**
     * The stack trace for the thread
     * @return stackTrace
     **/
    @ApiModelProperty(example = "null", value = "The stack trace for the thread")
    public String getStackTrace() {
        return stackTrace;
    }

    public void setStackTrace(String stackTrace) {
        this.stackTrace = stackTrace;
    }

    public ThreadDumpDTO threadName(String threadName) {
        this.threadName = threadName;
        return this;
    }

    /**
     * The name of the thread
     * @return threadName
     **/
    @ApiModelProperty(example = "null", value = "The name of the thread")
    public String getThreadName() {
        return threadName;
    }

    public void setThreadName(String threadName) {
        this.threadName = threadName;
    }

    public ThreadDumpDTO threadActiveMillis(Long threadActiveMillis) {
        this.threadActiveMillis = threadActiveMillis;
        return this;
    }

    /**
     * The number of milliseconds that the thread has been executing in the Processor
     * @return threadActiveMillis
     **/
    @ApiModelProperty(example = "null", value = "The number of milliseconds that the thread has been executing in the Processor")
    public Long getThreadActiveMillis() {
        return threadActiveMillis;
    }

    public void setThreadActiveMillis(Long threadActiveMillis) {
        this.threadActiveMillis = threadActiveMillis;
    }

    public ThreadDumpDTO taskTerminated(Boolean taskTerminated) {
        this.taskTerminated = taskTerminated;
        return this;
    }

    /**
     * Indicates whether or not the user has requested that the task be terminated. If this is true, it may indicate that the thread is in a state where it will continue running indefinitely without returning.
     * @return taskTerminated
     **/
    @ApiModelProperty(example = "null", value = "Indicates whether or not the user has requested that the task be terminated. If this is true, it may indicate that the thread is in a state where it will continue running indefinitely without returning.")
    public Boolean getTaskTerminated() {
        return taskTerminated;
    }

    public void setTaskTerminated(Boolean taskTerminated) {
        this.taskTerminated = taskTerminated;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ThreadDumpDTO threadDumpDTO = (ThreadDumpDTO) o;
        return Objects.equals(this.nodeId, threadDumpDTO.nodeId) &&
                Objects.equals(this.nodeAddress, threadDumpDTO.nodeAddress) &&
                Objects.equals(this.apiPort, threadDumpDTO.apiPort) &&
                Objects.equals(this.stackTrace, threadDumpDTO.stackTrace) &&
                Objects.equals(this.threadName, threadDumpDTO.threadName) &&
                Objects.equals(this.threadActiveMillis, threadDumpDTO.threadActiveMillis) &&
                Objects.equals(this.taskTerminated, threadDumpDTO.taskTerminated);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nodeId, nodeAddress, apiPort, stackTrace, threadName, threadActiveMillis, taskTerminated);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ThreadDumpDTO {\n");

        sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
        sb.append("    nodeAddress: ").append(toIndentedString(nodeAddress)).append("\n");
        sb.append("    apiPort: ").append(toIndentedString(apiPort)).append("\n");
        sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
        sb.append("    threadName: ").append(toIndentedString(threadName)).append("\n");
        sb.append("    threadActiveMillis: ").append(toIndentedString(threadActiveMillis)).append("\n");
        sb.append("    taskTerminated: ").append(toIndentedString(taskTerminated)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

